interface Coffee {
    String getDescription();
    double getCost();
}

class Espresso implements Coffee {
    public String getDescription() { return "Espresso"; }
    public double getCost() { return 2.0; }
}

class Cappuccino implements Coffee {
    public String getDescription() { return "Cappuccino"; }
    public double getCost() { return 3.0; }
}

class CoffeeFactory {
    public static Coffee createCoffee(String type) {
        return switch (type) {
            case "Espresso" -> new Espresso();
            case "Cappuccino" -> new Cappuccino();
            default -> throw new IllegalArgumentException("Unknown coffee type");
        }
    }
}

abstract class CoffeeDecorator implements Coffee {
    protected Coffee decoratedCoffee;
    public CoffeeDecorator(Coffee coffee) { this.decoratedCoffee = coffee; }
    public String getDescription() { return decoratedCoffee.getDescription(); }
    public double getCost() { return decoratedCoffee.getCost(); }
}

class MilkDecorator extends CoffeeDecorator {
    public MilkDecorator(Coffee coffee) { super(coffee); }
    public String getDescription() { return super.getDescription() + ", Milk"; }
    public double getCost() { return super.getCost() + 0.5; }
}

class CaramelDecorator extends CoffeeDecorator {
    public CaramelDecorator(Coffee coffee) { super(coffee); }
    public String getDescription() { return super.getDescription() + ", Caramel"; }
    public double getCost() { return super.getCost() + 0.7; }
}

public class CoffeeShopMain {
    public static void main(String[] args) {
        Coffee coffee = new CaramelDecorator(new MilkDecorator(new Espresso()));
        System.out.println(coffee.getDescription() + " costs $" + coffee.getCost());
    }
}
